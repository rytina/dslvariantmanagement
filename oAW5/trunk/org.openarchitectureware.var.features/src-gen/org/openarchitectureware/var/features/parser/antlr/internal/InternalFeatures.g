/*
* generated by Xtext
*/
grammar InternalFeatures;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.openarchitectureware.var.features.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.openarchitectureware.var.features.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.openarchitectureware.var.features.services.FeaturesGrammarAccess;

}

@parser::members {
 
 	private FeaturesGrammarAccess grammarAccess;
 	
    public InternalFeaturesParser(TokenStream input, IAstFactory factory, FeaturesGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/openarchitectureware/var/features/parser/antlr/internal/InternalFeatures.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "FeatureClause";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleFeatureClause
entryRuleFeatureClause returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFeatureClauseRule(), currentNode); }
	 iv_ruleFeatureClause=ruleFeatureClause 
	 { $current=$iv_ruleFeatureClause.current; } 
	 EOF 
;

// Rule FeatureClause
ruleFeatureClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getFeatureClauseAccess().getFeatureAndListParserRuleCall_0(), currentNode); 
    }
    this_FeatureAndList_0=ruleFeatureAndList
    { 
        $current = $this_FeatureAndList_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getFeatureClauseAccess().getFeatureOrListParserRuleCall_1(), currentNode); 
    }
    this_FeatureOrList_1=ruleFeatureOrList
    { 
        $current = $this_FeatureOrList_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getFeatureClauseAccess().getFeatureExpressionParserRuleCall_2(), currentNode); 
    }
    this_FeatureExpression_2=ruleFeatureExpression
    { 
        $current = $this_FeatureExpression_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getFeatureClauseAccess().getFeatureParserRuleCall_3(), currentNode); 
    }
    this_Feature_3=ruleFeature
    { 
        $current = $this_Feature_3.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleFeatureAndList
entryRuleFeatureAndList returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFeatureAndListRule(), currentNode); }
	 iv_ruleFeatureAndList=ruleFeatureAndList 
	 { $current=$iv_ruleFeatureAndList.current; } 
	 EOF 
;

// Rule FeatureAndList
ruleFeatureAndList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('featureAndList' 
    {
        createLeafNode(grammarAccess.getFeatureAndListAccess().getFeatureAndListKeyword_0(), null); 
    }
(	
	
	    lv_retained_1='retain' 
    {
        createLeafNode(grammarAccess.getFeatureAndListAccess().getRetainedRetainKeyword_1_0(), "retained"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFeatureAndListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "retained", true, "retain", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?'(' 
    {
        createLeafNode(grammarAccess.getFeatureAndListAccess().getLeftParenthesisKeyword_2(), null); 
    }
(	
	
	    lv_featureList_3=	RULE_ID
	{
		createLeafNode(grammarAccess.getFeatureAndListAccess().getFeatureListIDTerminalRuleCall_3_0(), "featureList"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFeatureAndListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "featureList", lv_featureList_3, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getFeatureAndListAccess().getCommaKeyword_4_0(), null); 
    }
(	
	
	    lv_featureList_5=	RULE_ID
	{
		createLeafNode(grammarAccess.getFeatureAndListAccess().getFeatureListIDTerminalRuleCall_4_1_0(), "featureList"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFeatureAndListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "featureList", lv_featureList_5, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))*')' 
    {
        createLeafNode(grammarAccess.getFeatureAndListAccess().getRightParenthesisKeyword_5(), null); 
    }
);





// Entry rule entryRuleFeatureOrList
entryRuleFeatureOrList returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFeatureOrListRule(), currentNode); }
	 iv_ruleFeatureOrList=ruleFeatureOrList 
	 { $current=$iv_ruleFeatureOrList.current; } 
	 EOF 
;

// Rule FeatureOrList
ruleFeatureOrList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('featureOrList' 
    {
        createLeafNode(grammarAccess.getFeatureOrListAccess().getFeatureOrListKeyword_0(), null); 
    }
(	
	
	    lv_retained_1='retain' 
    {
        createLeafNode(grammarAccess.getFeatureOrListAccess().getRetainedRetainKeyword_1_0(), "retained"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFeatureOrListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "retained", true, "retain", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?'(' 
    {
        createLeafNode(grammarAccess.getFeatureOrListAccess().getLeftParenthesisKeyword_2(), null); 
    }
(	
	
	    lv_featureList_3=	RULE_ID
	{
		createLeafNode(grammarAccess.getFeatureOrListAccess().getFeatureListIDTerminalRuleCall_3_0(), "featureList"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFeatureOrListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "featureList", lv_featureList_3, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getFeatureOrListAccess().getCommaKeyword_4_0(), null); 
    }
(	
	
	    lv_featureList_5=	RULE_ID
	{
		createLeafNode(grammarAccess.getFeatureOrListAccess().getFeatureListIDTerminalRuleCall_4_1_0(), "featureList"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFeatureOrListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "featureList", lv_featureList_5, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
))*')' 
    {
        createLeafNode(grammarAccess.getFeatureOrListAccess().getRightParenthesisKeyword_5(), null); 
    }
);





// Entry rule entryRuleFeatureExpression
entryRuleFeatureExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFeatureExpressionRule(), currentNode); }
	 iv_ruleFeatureExpression=ruleFeatureExpression 
	 { $current=$iv_ruleFeatureExpression.current; } 
	 EOF 
;

// Rule FeatureExpression
ruleFeatureExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('featureExp' 
    {
        createLeafNode(grammarAccess.getFeatureExpressionAccess().getFeatureExpKeyword_0(), null); 
    }
(	
	
	    lv_retained_1='retain' 
    {
        createLeafNode(grammarAccess.getFeatureExpressionAccess().getRetainedRetainKeyword_1_0(), "retained"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFeatureExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "retained", true, "retain", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?'(' 
    {
        createLeafNode(grammarAccess.getFeatureExpressionAccess().getLeftParenthesisKeyword_2(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFeatureExpressionAccess().getExpressionOrExpressionParserRuleCall_3_0(), currentNode); 
	    }
	    lv_expression_3=ruleOrExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFeatureExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expression", lv_expression_3, "OrExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getFeatureExpressionAccess().getRightParenthesisKeyword_4(), null); 
    }
);





// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFeatureRule(), currentNode); }
	 iv_ruleFeature=ruleFeature 
	 { $current=$iv_ruleFeature.current; } 
	 EOF 
;

// Rule Feature
ruleFeature returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('feature' 
    {
        createLeafNode(grammarAccess.getFeatureAccess().getFeatureKeyword_0(), null); 
    }
(	
	
	    lv_retained_1='retain' 
    {
        createLeafNode(grammarAccess.getFeatureAccess().getRetainedRetainKeyword_1_0(), "retained"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFeatureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "retained", true, "retain", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    lv_feature_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getFeatureAccess().getFeatureIDTerminalRuleCall_2_0(), "feature"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFeatureRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "feature", lv_feature_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOrExpressionRule(), currentNode); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getOperandsAndExpressionParserRuleCall_0_0(), currentNode); 
	    }
	    lv_operands_0=ruleAndExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "operands", lv_operands_0, "AndExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('or' 
    {
        createLeafNode(grammarAccess.getOrExpressionAccess().getOrKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getOperandsAndExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_operands_2=ruleAndExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "operands", lv_operands_2, "AndExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAndExpressionRule(), currentNode); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getOperandsOperandParserRuleCall_0_0(), currentNode); 
	    }
	    lv_operands_0=ruleOperand 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "operands", lv_operands_0, "Operand", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)('and' 
    {
        createLeafNode(grammarAccess.getAndExpressionAccess().getAndKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getOperandsOperandParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_operands_2=ruleOperand 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "operands", lv_operands_2, "Operand", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleOperand
entryRuleOperand returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOperandRule(), currentNode); }
	 iv_ruleOperand=ruleOperand 
	 { $current=$iv_ruleOperand.current; } 
	 EOF 
;

// Rule Operand
ruleOperand returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_isNot_0='not' 
    {
        createLeafNode(grammarAccess.getOperandAccess().getIsNotNotKeyword_0_0(), "isNot"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isNot", true, "not", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOperandAccess().getExpressionAtomParserRuleCall_1_0(), currentNode); 
	    }
	    lv_expression_1=ruleAtom 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expression", lv_expression_1, "Atom", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAtomRule(), currentNode); }
	 iv_ruleAtom=ruleAtom 
	 { $current=$iv_ruleAtom.current; } 
	 EOF 
;

// Rule Atom
ruleAtom returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_feature_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getAtomAccess().getFeatureIDTerminalRuleCall_0_0(), "feature"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAtomRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "feature", lv_feature_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)
    |('(' 
    {
        createLeafNode(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getExpressionOrExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
	    lv_expression_2=ruleOrExpression 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAtomRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "expression", lv_expression_2, "OrExpression", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)')' 
    {
        createLeafNode(grammarAccess.getAtomAccess().getRightParenthesisKeyword_1_2(), null); 
    }
));





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


