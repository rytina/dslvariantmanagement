/*
* generated by Xtext
*/
package org.openarchitectureware.var.features.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.openarchitectureware.var.features.services.FeaturesGrammarAccess;

import com.google.inject.Inject;

public class FeaturesParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private FeaturesGrammarAccess grammarAccess;
		
	public FeaturesGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureClause_Alternatives(this, this, 0, inst);
			case 1: return new FeatureAndList_Group(this, this, 1, inst);
			case 2: return new FeatureOrList_Group(this, this, 2, inst);
			case 3: return new FeatureExpression_Group(this, this, 3, inst);
			case 4: return new Feature_Group(this, this, 4, inst);
			case 5: return new OrExpression_Group(this, this, 5, inst);
			case 6: return new AndExpression_Group(this, this, 6, inst);
			case 7: return new Operand_Group(this, this, 7, inst);
			case 8: return new Atom_Alternatives(this, this, 8, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule FeatureClause ****************
 *
 * FeatureClause:
 *   FeatureAndList|FeatureOrList|FeatureExpression|Feature;
 *
 **/

// FeatureAndList|FeatureOrList|FeatureExpression|Feature
protected class FeatureClause_Alternatives extends AlternativesToken {

	public FeatureClause_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getFeatureClauseAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureClause_FeatureAndListParserRuleCall_0(parent, this, 0, inst);
			case 1: return new FeatureClause_FeatureOrListParserRuleCall_1(parent, this, 1, inst);
			case 2: return new FeatureClause_FeatureExpressionParserRuleCall_2(parent, this, 2, inst);
			case 3: return new FeatureClause_FeatureParserRuleCall_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFeatureClauseRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// FeatureAndList
protected class FeatureClause_FeatureAndListParserRuleCall_0 extends RuleCallToken {
	
	public FeatureClause_FeatureAndListParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureClauseAccess().getFeatureAndListParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureAndList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(FeatureAndList_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFeatureAndListRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// FeatureOrList
protected class FeatureClause_FeatureOrListParserRuleCall_1 extends RuleCallToken {
	
	public FeatureClause_FeatureOrListParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureClauseAccess().getFeatureOrListParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureOrList_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(FeatureOrList_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFeatureOrListRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// FeatureExpression
protected class FeatureClause_FeatureExpressionParserRuleCall_2 extends RuleCallToken {
	
	public FeatureClause_FeatureExpressionParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureClauseAccess().getFeatureExpressionParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(FeatureExpression_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFeatureExpressionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Feature
protected class FeatureClause_FeatureParserRuleCall_3 extends RuleCallToken {
	
	public FeatureClause_FeatureParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureClauseAccess().getFeatureParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Feature_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Feature_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule FeatureClause ****************/


/************ begin Rule FeatureAndList ****************
 *
 * FeatureAndList:
 *   "featureAndList" retained?="retain"? "(" featureList+=ID ("," featureList+=ID)* ")";
 *
 **/

// "featureAndList" retained?="retain"? "(" featureList+=ID ("," featureList+=ID)* ")"
protected class FeatureAndList_Group extends GroupToken {
	
	public FeatureAndList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFeatureAndListAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureAndList_RightParenthesisKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFeatureAndListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "featureAndList"
protected class FeatureAndList_FeatureAndListKeyword_0 extends KeywordToken  {
	
	public FeatureAndList_FeatureAndListKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureAndListAccess().getFeatureAndListKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// retained?="retain"?
protected class FeatureAndList_RetainedAssignment_1 extends AssignmentToken  {
	
	public FeatureAndList_RetainedAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureAndListAccess().getRetainedAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureAndList_FeatureAndListKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("retained",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("retained");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getFeatureAndListAccess().getRetainedRetainKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class FeatureAndList_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public FeatureAndList_LeftParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureAndListAccess().getLeftParenthesisKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureAndList_RetainedAssignment_1(parent, this, 0, inst);
			case 1: return new FeatureAndList_FeatureAndListKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// featureList+=ID
protected class FeatureAndList_FeatureListAssignment_3 extends AssignmentToken  {
	
	public FeatureAndList_FeatureListAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureAndListAccess().getFeatureListAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureAndList_LeftParenthesisKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("featureList",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("featureList");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFeatureAndListAccess().getFeatureListIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("," featureList+=ID)*
protected class FeatureAndList_Group_4 extends GroupToken {
	
	public FeatureAndList_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFeatureAndListAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureAndList_FeatureListAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class FeatureAndList_CommaKeyword_4_0 extends KeywordToken  {
	
	public FeatureAndList_CommaKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureAndListAccess().getCommaKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureAndList_Group_4(parent, this, 0, inst);
			case 1: return new FeatureAndList_FeatureListAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// featureList+=ID
protected class FeatureAndList_FeatureListAssignment_4_1 extends AssignmentToken  {
	
	public FeatureAndList_FeatureListAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureAndListAccess().getFeatureListAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureAndList_CommaKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("featureList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("featureList");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFeatureAndListAccess().getFeatureListIDTerminalRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}


// ")"
protected class FeatureAndList_RightParenthesisKeyword_5 extends KeywordToken  {
	
	public FeatureAndList_RightParenthesisKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureAndListAccess().getRightParenthesisKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureAndList_Group_4(parent, this, 0, inst);
			case 1: return new FeatureAndList_FeatureListAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule FeatureAndList ****************/


/************ begin Rule FeatureOrList ****************
 *
 * FeatureOrList:
 *   "featureOrList" retained?="retain"? "(" featureList+=ID ("," featureList+=ID)* ")";
 *
 **/

// "featureOrList" retained?="retain"? "(" featureList+=ID ("," featureList+=ID)* ")"
protected class FeatureOrList_Group extends GroupToken {
	
	public FeatureOrList_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFeatureOrListAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureOrList_RightParenthesisKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFeatureOrListRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "featureOrList"
protected class FeatureOrList_FeatureOrListKeyword_0 extends KeywordToken  {
	
	public FeatureOrList_FeatureOrListKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureOrListAccess().getFeatureOrListKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// retained?="retain"?
protected class FeatureOrList_RetainedAssignment_1 extends AssignmentToken  {
	
	public FeatureOrList_RetainedAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureOrListAccess().getRetainedAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureOrList_FeatureOrListKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("retained",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("retained");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getFeatureOrListAccess().getRetainedRetainKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class FeatureOrList_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public FeatureOrList_LeftParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureOrListAccess().getLeftParenthesisKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureOrList_RetainedAssignment_1(parent, this, 0, inst);
			case 1: return new FeatureOrList_FeatureOrListKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// featureList+=ID
protected class FeatureOrList_FeatureListAssignment_3 extends AssignmentToken  {
	
	public FeatureOrList_FeatureListAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureOrListAccess().getFeatureListAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureOrList_LeftParenthesisKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("featureList",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("featureList");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFeatureOrListAccess().getFeatureListIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("," featureList+=ID)*
protected class FeatureOrList_Group_4 extends GroupToken {
	
	public FeatureOrList_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFeatureOrListAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureOrList_FeatureListAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class FeatureOrList_CommaKeyword_4_0 extends KeywordToken  {
	
	public FeatureOrList_CommaKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureOrListAccess().getCommaKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureOrList_Group_4(parent, this, 0, inst);
			case 1: return new FeatureOrList_FeatureListAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// featureList+=ID
protected class FeatureOrList_FeatureListAssignment_4_1 extends AssignmentToken  {
	
	public FeatureOrList_FeatureListAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureOrListAccess().getFeatureListAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureOrList_CommaKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("featureList",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("featureList");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFeatureOrListAccess().getFeatureListIDTerminalRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}


// ")"
protected class FeatureOrList_RightParenthesisKeyword_5 extends KeywordToken  {
	
	public FeatureOrList_RightParenthesisKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureOrListAccess().getRightParenthesisKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureOrList_Group_4(parent, this, 0, inst);
			case 1: return new FeatureOrList_FeatureListAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule FeatureOrList ****************/


/************ begin Rule FeatureExpression ****************
 *
 * FeatureExpression:
 *   "featureExp" retained?="retain"? "(" expression=OrExpression ")";
 *
 **/

// "featureExp" retained?="retain"? "(" expression=OrExpression ")"
protected class FeatureExpression_Group extends GroupToken {
	
	public FeatureExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFeatureExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureExpression_RightParenthesisKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFeatureExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "featureExp"
protected class FeatureExpression_FeatureExpKeyword_0 extends KeywordToken  {
	
	public FeatureExpression_FeatureExpKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureExpressionAccess().getFeatureExpKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// retained?="retain"?
protected class FeatureExpression_RetainedAssignment_1 extends AssignmentToken  {
	
	public FeatureExpression_RetainedAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureExpressionAccess().getRetainedAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureExpression_FeatureExpKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("retained",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("retained");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getFeatureExpressionAccess().getRetainedRetainKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class FeatureExpression_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public FeatureExpression_LeftParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureExpressionAccess().getLeftParenthesisKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureExpression_RetainedAssignment_1(parent, this, 0, inst);
			case 1: return new FeatureExpression_FeatureExpKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// expression=OrExpression
protected class FeatureExpression_ExpressionAssignment_3 extends AssignmentToken  {
	
	public FeatureExpression_ExpressionAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureExpressionAccess().getExpressionAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expression",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOrExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getFeatureExpressionAccess().getExpressionOrExpressionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FeatureExpression_LeftParenthesisKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class FeatureExpression_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public FeatureExpression_RightParenthesisKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureExpressionAccess().getRightParenthesisKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FeatureExpression_ExpressionAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule FeatureExpression ****************/


/************ begin Rule Feature ****************
 *
 * Feature:
 *   "feature" retained?="retain"? feature=ID;
 *
 **/

// "feature" retained?="retain"? feature=ID
protected class Feature_Group extends GroupToken {
	
	public Feature_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFeatureAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Feature_FeatureAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFeatureRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "feature"
protected class Feature_FeatureKeyword_0 extends KeywordToken  {
	
	public Feature_FeatureKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFeatureAccess().getFeatureKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// retained?="retain"?
protected class Feature_RetainedAssignment_1 extends AssignmentToken  {
	
	public Feature_RetainedAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureAccess().getRetainedAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Feature_FeatureKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("retained",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("retained");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getFeatureAccess().getRetainedRetainKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// feature=ID
protected class Feature_FeatureAssignment_2 extends AssignmentToken  {
	
	public Feature_FeatureAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFeatureAccess().getFeatureAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Feature_RetainedAssignment_1(parent, this, 0, inst);
			case 1: return new Feature_FeatureKeyword_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("feature",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("feature");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getFeatureAccess().getFeatureIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Feature ****************/


/************ begin Rule OrExpression ****************
 *
 * OrExpression:
 *   operands+=AndExpression ("or" operands+=AndExpression)*;
 *
 **/

// operands+=AndExpression ("or" operands+=AndExpression)*
protected class OrExpression_Group extends GroupToken {
	
	public OrExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_Group_1(parent, this, 0, inst);
			case 1: return new OrExpression_OperandsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOrExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// operands+=AndExpression
protected class OrExpression_OperandsAssignment_0 extends AssignmentToken  {
	
	public OrExpression_OperandsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getOperandsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operands",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operands");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOrExpressionAccess().getOperandsAndExpressionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("or" operands+=AndExpression)*
protected class OrExpression_Group_1 extends GroupToken {
	
	public OrExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_OperandsAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "or"
protected class OrExpression_OrKeyword_1_0 extends KeywordToken  {
	
	public OrExpression_OrKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getOrKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_Group_1(parent, this, 0, inst);
			case 1: return new OrExpression_OperandsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// operands+=AndExpression
protected class OrExpression_OperandsAssignment_1_1 extends AssignmentToken  {
	
	public OrExpression_OperandsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOrExpressionAccess().getOperandsAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operands",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operands");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOrExpressionAccess().getOperandsAndExpressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OrExpression_OrKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule OrExpression ****************/


/************ begin Rule AndExpression ****************
 *
 * AndExpression:
 *   operands+=Operand ("and" operands+=Operand)*;
 *
 **/

// operands+=Operand ("and" operands+=Operand)*
protected class AndExpression_Group extends GroupToken {
	
	public AndExpression_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group_1(parent, this, 0, inst);
			case 1: return new AndExpression_OperandsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAndExpressionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// operands+=Operand
protected class AndExpression_OperandsAssignment_0 extends AssignmentToken  {
	
	public AndExpression_OperandsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getOperandsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Operand_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operands",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operands");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOperandRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAndExpressionAccess().getOperandsOperandParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// ("and" operands+=Operand)*
protected class AndExpression_Group_1 extends GroupToken {
	
	public AndExpression_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_OperandsAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "and"
protected class AndExpression_AndKeyword_1_0 extends KeywordToken  {
	
	public AndExpression_AndKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getAndKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AndExpression_Group_1(parent, this, 0, inst);
			case 1: return new AndExpression_OperandsAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// operands+=Operand
protected class AndExpression_OperandsAssignment_1_1 extends AssignmentToken  {
	
	public AndExpression_OperandsAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAndExpressionAccess().getOperandsAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Operand_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("operands",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("operands");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOperandRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAndExpressionAccess().getOperandsOperandParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AndExpression_AndKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AndExpression ****************/


/************ begin Rule Operand ****************
 *
 * Operand:
 *   isNot?="not"? expression=Atom;
 *
 **/

// isNot?="not"? expression=Atom
protected class Operand_Group extends GroupToken {
	
	public Operand_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOperandAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Operand_ExpressionAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOperandRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// isNot?="not"?
protected class Operand_IsNotAssignment_0 extends AssignmentToken  {
	
	public Operand_IsNotAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOperandAccess().getIsNotAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isNot",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isNot");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getOperandAccess().getIsNotNotKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// expression=Atom
protected class Operand_ExpressionAssignment_1 extends AssignmentToken  {
	
	public Operand_ExpressionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOperandAccess().getExpressionAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Atom_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expression",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAtomRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOperandAccess().getExpressionAtomParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Operand_IsNotAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule Operand ****************/


/************ begin Rule Atom ****************
 *
 * Atom:
 *   feature=ID|"(" expression=OrExpression ")";
 *
 **/

// feature=ID|"(" expression=OrExpression ")"
protected class Atom_Alternatives extends AlternativesToken {

	public Atom_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getAtomAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Atom_FeatureAssignment_0(parent, this, 0, inst);
			case 1: return new Atom_Group_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAtomRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// feature=ID
protected class Atom_FeatureAssignment_0 extends AssignmentToken  {
	
	public Atom_FeatureAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAtomAccess().getFeatureAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("feature",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("feature");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAtomAccess().getFeatureIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "(" expression=OrExpression ")"
protected class Atom_Group_1 extends GroupToken {
	
	public Atom_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAtomAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Atom_RightParenthesisKeyword_1_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class Atom_LeftParenthesisKeyword_1_0 extends KeywordToken  {
	
	public Atom_LeftParenthesisKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// expression=OrExpression
protected class Atom_ExpressionAssignment_1_1 extends AssignmentToken  {
	
	public Atom_ExpressionAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAtomAccess().getExpressionAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OrExpression_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("expression",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("expression");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOrExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAtomAccess().getExpressionOrExpressionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Atom_LeftParenthesisKeyword_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Atom_RightParenthesisKeyword_1_2 extends KeywordToken  {
	
	public Atom_RightParenthesisKeyword_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAtomAccess().getRightParenthesisKeyword_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Atom_ExpressionAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule Atom ****************/

}
