/*
* generated by Xtext
*/

package org.openarchitectureware.var.features.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FeaturesGrammarAccess implements IGrammarAccess {
	
	
	public class FeatureClauseElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureAndListParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureOrListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFeatureExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFeatureParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//FeatureClause:
		//  FeatureAndList|FeatureOrList|FeatureExpression|Feature;
		public ParserRule getRule() { return rule; }

		//FeatureAndList|FeatureOrList|FeatureExpression|Feature
		public Alternatives getAlternatives() { return cAlternatives; }

		//FeatureAndList
		public RuleCall getFeatureAndListParserRuleCall_0() { return cFeatureAndListParserRuleCall_0; }

		//FeatureOrList
		public RuleCall getFeatureOrListParserRuleCall_1() { return cFeatureOrListParserRuleCall_1; }

		//FeatureExpression
		public RuleCall getFeatureExpressionParserRuleCall_2() { return cFeatureExpressionParserRuleCall_2; }

		//Feature
		public RuleCall getFeatureParserRuleCall_3() { return cFeatureParserRuleCall_3; }
	}

	public class FeatureAndListElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureAndList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureAndListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRetainedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRetainedRetainKeyword_1_0 = (Keyword)cRetainedAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeatureListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeatureListIDTerminalRuleCall_3_0 = (RuleCall)cFeatureListAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFeatureListAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFeatureListIDTerminalRuleCall_4_1_0 = (RuleCall)cFeatureListAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FeatureAndList:
		//  "featureAndList" retained?="retain"? "(" featureList+=ID ("," featureList+=ID)* ")";
		public ParserRule getRule() { return rule; }

		//"featureAndList" retained?="retain"? "(" featureList+=ID ("," featureList+=ID)* ")"
		public Group getGroup() { return cGroup; }

		//"featureAndList"
		public Keyword getFeatureAndListKeyword_0() { return cFeatureAndListKeyword_0; }

		//retained?="retain"?
		public Assignment getRetainedAssignment_1() { return cRetainedAssignment_1; }

		//"retain"
		public Keyword getRetainedRetainKeyword_1_0() { return cRetainedRetainKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//featureList+=ID
		public Assignment getFeatureListAssignment_3() { return cFeatureListAssignment_3; }

		//ID
		public RuleCall getFeatureListIDTerminalRuleCall_3_0() { return cFeatureListIDTerminalRuleCall_3_0; }

		//("," featureList+=ID)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//featureList+=ID
		public Assignment getFeatureListAssignment_4_1() { return cFeatureListAssignment_4_1; }

		//ID
		public RuleCall getFeatureListIDTerminalRuleCall_4_1_0() { return cFeatureListIDTerminalRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class FeatureOrListElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureOrList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureOrListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRetainedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRetainedRetainKeyword_1_0 = (Keyword)cRetainedAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeatureListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeatureListIDTerminalRuleCall_3_0 = (RuleCall)cFeatureListAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFeatureListAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFeatureListIDTerminalRuleCall_4_1_0 = (RuleCall)cFeatureListAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FeatureOrList:
		//  "featureOrList" retained?="retain"? "(" featureList+=ID ("," featureList+=ID)* ")";
		public ParserRule getRule() { return rule; }

		//"featureOrList" retained?="retain"? "(" featureList+=ID ("," featureList+=ID)* ")"
		public Group getGroup() { return cGroup; }

		//"featureOrList"
		public Keyword getFeatureOrListKeyword_0() { return cFeatureOrListKeyword_0; }

		//retained?="retain"?
		public Assignment getRetainedAssignment_1() { return cRetainedAssignment_1; }

		//"retain"
		public Keyword getRetainedRetainKeyword_1_0() { return cRetainedRetainKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//featureList+=ID
		public Assignment getFeatureListAssignment_3() { return cFeatureListAssignment_3; }

		//ID
		public RuleCall getFeatureListIDTerminalRuleCall_3_0() { return cFeatureListIDTerminalRuleCall_3_0; }

		//("," featureList+=ID)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//featureList+=ID
		public Assignment getFeatureListAssignment_4_1() { return cFeatureListAssignment_4_1; }

		//ID
		public RuleCall getFeatureListIDTerminalRuleCall_4_1_0() { return cFeatureListIDTerminalRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class FeatureExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureExpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRetainedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRetainedRetainKeyword_1_0 = (Keyword)cRetainedAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionOrExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FeatureExpression:
		//  "featureExp" retained?="retain"? "(" expression=OrExpression ")";
		public ParserRule getRule() { return rule; }

		//"featureExp" retained?="retain"? "(" expression=OrExpression ")"
		public Group getGroup() { return cGroup; }

		//"featureExp"
		public Keyword getFeatureExpKeyword_0() { return cFeatureExpKeyword_0; }

		//retained?="retain"?
		public Assignment getRetainedAssignment_1() { return cRetainedAssignment_1; }

		//"retain"
		public Keyword getRetainedRetainKeyword_1_0() { return cRetainedRetainKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//expression=OrExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//OrExpression
		public RuleCall getExpressionOrExpressionParserRuleCall_3_0() { return cExpressionOrExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class FeatureElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRetainedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRetainedRetainKeyword_1_0 = (Keyword)cRetainedAssignment_1.eContents().get(0);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeatureIDTerminalRuleCall_2_0 = (RuleCall)cFeatureAssignment_2.eContents().get(0);
		
		//Feature:
		//  "feature" retained?="retain"? feature=ID;
		public ParserRule getRule() { return rule; }

		//"feature" retained?="retain"? feature=ID
		public Group getGroup() { return cGroup; }

		//"feature"
		public Keyword getFeatureKeyword_0() { return cFeatureKeyword_0; }

		//retained?="retain"?
		public Assignment getRetainedAssignment_1() { return cRetainedAssignment_1; }

		//"retain"
		public Keyword getRetainedRetainKeyword_1_0() { return cRetainedRetainKeyword_1_0; }

		//feature=ID
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }

		//ID
		public RuleCall getFeatureIDTerminalRuleCall_2_0() { return cFeatureIDTerminalRuleCall_2_0; }
	}

	public class OrExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperandsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperandsAndExpressionParserRuleCall_0_0 = (RuleCall)cOperandsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOperandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandsAndExpressionParserRuleCall_1_1_0 = (RuleCall)cOperandsAssignment_1_1.eContents().get(0);
		
		//OrExpression:
		//  operands+=AndExpression ("or" operands+=AndExpression)*;
		public ParserRule getRule() { return rule; }

		//operands+=AndExpression ("or" operands+=AndExpression)*
		public Group getGroup() { return cGroup; }

		//operands+=AndExpression
		public Assignment getOperandsAssignment_0() { return cOperandsAssignment_0; }

		//AndExpression
		public RuleCall getOperandsAndExpressionParserRuleCall_0_0() { return cOperandsAndExpressionParserRuleCall_0_0; }

		//("or" operands+=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"or"
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }

		//operands+=AndExpression
		public Assignment getOperandsAssignment_1_1() { return cOperandsAssignment_1_1; }

		//AndExpression
		public RuleCall getOperandsAndExpressionParserRuleCall_1_1_0() { return cOperandsAndExpressionParserRuleCall_1_1_0; }
	}

	public class AndExpressionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperandsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperandsOperandParserRuleCall_0_0 = (RuleCall)cOperandsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOperandsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandsOperandParserRuleCall_1_1_0 = (RuleCall)cOperandsAssignment_1_1.eContents().get(0);
		
		//AndExpression:
		//  operands+=Operand ("and" operands+=Operand)*;
		public ParserRule getRule() { return rule; }

		//operands+=Operand ("and" operands+=Operand)*
		public Group getGroup() { return cGroup; }

		//operands+=Operand
		public Assignment getOperandsAssignment_0() { return cOperandsAssignment_0; }

		//Operand
		public RuleCall getOperandsOperandParserRuleCall_0_0() { return cOperandsOperandParserRuleCall_0_0; }

		//("and" operands+=Operand)*
		public Group getGroup_1() { return cGroup_1; }

		//"and"
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }

		//operands+=Operand
		public Assignment getOperandsAssignment_1_1() { return cOperandsAssignment_1_1; }

		//Operand
		public RuleCall getOperandsOperandParserRuleCall_1_1_0() { return cOperandsOperandParserRuleCall_1_1_0; }
	}

	public class OperandElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsNotAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsNotNotKeyword_0_0 = (Keyword)cIsNotAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionAtomParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Operand:
		//  isNot?="not"? expression=Atom;
		public ParserRule getRule() { return rule; }

		//isNot?="not"? expression=Atom
		public Group getGroup() { return cGroup; }

		//isNot?="not"?
		public Assignment getIsNotAssignment_0() { return cIsNotAssignment_0; }

		//"not"
		public Keyword getIsNotNotKeyword_0_0() { return cIsNotNotKeyword_0_0; }

		//expression=Atom
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Atom
		public RuleCall getExpressionAtomParserRuleCall_1_0() { return cExpressionAtomParserRuleCall_1_0; }
	}

	public class AtomElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFeatureAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureIDTerminalRuleCall_0_0 = (RuleCall)cFeatureAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionOrExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Atom:
		//  feature=ID|"(" expression=OrExpression ")";
		public ParserRule getRule() { return rule; }

		//feature=ID|"(" expression=OrExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//feature=ID
		public Assignment getFeatureAssignment_0() { return cFeatureAssignment_0; }

		//ID
		public RuleCall getFeatureIDTerminalRuleCall_0_0() { return cFeatureIDTerminalRuleCall_0_0; }

		//"(" expression=OrExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//expression=OrExpression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//OrExpression
		public RuleCall getExpressionOrExpressionParserRuleCall_1_1_0() { return cExpressionOrExpressionParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	
	
	private FeatureClauseElements pFeatureClause;
	private FeatureAndListElements pFeatureAndList;
	private FeatureOrListElements pFeatureOrList;
	private FeatureExpressionElements pFeatureExpression;
	private FeatureElements pFeature;
	private OrExpressionElements pOrExpression;
	private AndExpressionElements pAndExpression;
	private OperandElements pOperand;
	private AtomElements pAtom;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public FeaturesGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//FeatureClause:
	//  FeatureAndList|FeatureOrList|FeatureExpression|Feature;
	public FeatureClauseElements getFeatureClauseAccess() {
		return (pFeatureClause != null) ? pFeatureClause : (pFeatureClause = new FeatureClauseElements());
	}
	
	public ParserRule getFeatureClauseRule() {
		return getFeatureClauseAccess().getRule();
	}

	//FeatureAndList:
	//  "featureAndList" retained?="retain"? "(" featureList+=ID ("," featureList+=ID)* ")";
	public FeatureAndListElements getFeatureAndListAccess() {
		return (pFeatureAndList != null) ? pFeatureAndList : (pFeatureAndList = new FeatureAndListElements());
	}
	
	public ParserRule getFeatureAndListRule() {
		return getFeatureAndListAccess().getRule();
	}

	//FeatureOrList:
	//  "featureOrList" retained?="retain"? "(" featureList+=ID ("," featureList+=ID)* ")";
	public FeatureOrListElements getFeatureOrListAccess() {
		return (pFeatureOrList != null) ? pFeatureOrList : (pFeatureOrList = new FeatureOrListElements());
	}
	
	public ParserRule getFeatureOrListRule() {
		return getFeatureOrListAccess().getRule();
	}

	//FeatureExpression:
	//  "featureExp" retained?="retain"? "(" expression=OrExpression ")";
	public FeatureExpressionElements getFeatureExpressionAccess() {
		return (pFeatureExpression != null) ? pFeatureExpression : (pFeatureExpression = new FeatureExpressionElements());
	}
	
	public ParserRule getFeatureExpressionRule() {
		return getFeatureExpressionAccess().getRule();
	}

	//Feature:
	//  "feature" retained?="retain"? feature=ID;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//OrExpression:
	//  operands+=AndExpression ("or" operands+=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return (pOrExpression != null) ? pOrExpression : (pOrExpression = new OrExpressionElements());
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//AndExpression:
	//  operands+=Operand ("and" operands+=Operand)*;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//Operand:
	//  isNot?="not"? expression=Atom;
	public OperandElements getOperandAccess() {
		return (pOperand != null) ? pOperand : (pOperand = new OperandElements());
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}

	//Atom:
	//  feature=ID|"(" expression=OrExpression ")";
	public AtomElements getAtomAccess() {
		return (pAtom != null) ? pAtom : (pAtom = new AtomElements());
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
