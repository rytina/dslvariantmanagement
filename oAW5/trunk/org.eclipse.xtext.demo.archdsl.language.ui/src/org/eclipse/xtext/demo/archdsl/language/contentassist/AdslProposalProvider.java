/*
* generated by Xtext
*/
package org.eclipse.xtext.demo.archdsl.language.contentassist;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.demo.archdsl.language.adsl.FeatureModelImport;
import org.eclipse.xtext.demo.archdsl.language.adsl.File;
import org.eclipse.xtext.demo.archdsl.language.contentassist.AbstractAdslProposalProvider;
import org.eclipse.xtext.demo.archdsl.language.helper.AdslHelper;
import org.eclipse.xtext.ui.core.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.core.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.var.featureaccess.ext.FeatureSupport;
import org.eclipse.xtext.demo.archdsl.language.adsl.System;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class AdslProposalProvider extends AbstractAdslProposalProvider {
  
  public void completeFeature_Feature(EObject model, 
                                      Assignment assignment, 
                                      ContentAssistContext context, 
                                      ICompletionProposalAcceptor acceptor) 
  {
    List<String> features = FeatureSupport.getAllFeatures(getFeatureModelUri(model));
    
    for(String f : features){
      ICompletionProposal completionProposal = 
        createCompletionProposal(f, context);
      acceptor.accept(completionProposal);
    }
  }
  
  private String getFeatureModelUri(EObject o){
    return ( (FeatureModelImport) 
             ((File)EcoreUtil.getRootContainer(o)).getFeatureModel() ).getUri();
  }
  
  public void completeUsing_System( EObject model,
                                    Assignment assignment, 
                                    ContentAssistContext context, 
                                    ICompletionProposalAcceptor acceptor) 
  {
    List<System> systems = AdslHelper.allNonEmptySystems(model);
    systems.remove(model.eContainer());
    
    for (System s : systems) {
      ICompletionProposal completionProposal = 
        createCompletionProposal(AdslHelper.qualifiedName(s), context);
      acceptor.accept(completionProposal);
       
    }
  }

}
