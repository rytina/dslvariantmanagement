import adsl;

extension org::eclipse::xtext::demo::archdsl::language::extensions::Extensions;
extension org::eclipse::xtend::util::stdlib::io;
extension org::eclipse::xtend::util::stdlib::naming;

//{ migration issue: Scoping in TMF is different to oAW 4.3.1
// TODO: use EMFIndex instead of allElements()
//-----------------------------------------------------------
/*

// you cannot have duplicate qualified names for components
context Component ERROR "Qualified Name "+qualifiedName()+" must be unique ("+loc()+")" :
   allComponents().select( c| c.qualifiedName() == qualifiedName() ).size == 1;
 
// you cannot have duplicate qualified names for data types
context DataType ERROR "Qualified Name "+qualifiedName()+" must be unique ("+loc()+")" :
   allDataTypes().select( c| c.qualifiedName() == qualifiedName() ).size == 1;

// an attribute's type must be visible
context Attribute ERROR "type not defined/not visible ("+loc()+")" :
	visibleInstancesOfType( this, DataType ).contains( typeref.type );       

// a port's interface must be visible
context Port ERROR "interface not defined. Missing a 'using'?:  ("+loc()+")":
	visibleInstancesOfType(this, Interface).contains(interface);   
   
// a typeref's type must be visible
context DataTypeRef ERROR "type "+type.name+" not found or visible ("+loc()+")":
	visibleInstancesOfType( this, DataType ).contains( type );       
   
// a primitivetyperef's type must be visible
context PrimitiveTypeRef ERROR "primitive type (!) "+type.name+" not found or visible ("+loc()+")":
	visibleInstancesOfType( this, PrimitiveType ).contains( type );  

context Instance ERROR "mandatory port(s) not connected: "+type.ports.select(p|p.isMandatory).reject(p|p.allElements().typeSelect(Connector).exists(c|c.source.instance == this && c.source.port == p)).collect(p|p.name):
	type.ports.select(p|p.isMandatory).
		forAll(p|p.allElements().typeSelect(Connector).
			exists(c| (c.source.instance == this && c.source.port ==p ) ||
			          (c.target.instance == this && c.target.port ==p )                                                     ));



*/
//}



// generically, if something has a name, make sure it is not "unnamed"
context emf::EObject if metaType.getProperty("name")!=null ERROR "name not yet specified. ("+loc()+")" :
   metaType.getProperty("name").get(this).toString().toLowerCase() != "unnamed";
   
// interface names must start with "I"   
context Interface ERROR "interface names must start with a capital I ("+loc()+")":
	name.startsWith("I");

// a complex type's attributes must have unique names   
context Attribute ERROR "name not unique ("+loc()+")" :
   ((ComplexType)eContainer).attributes.select(a|a.name == name).size == 1;

     
   
// ports must have unique names per component
context Port ERROR "duplicate name ("+loc()+")":
	((Component)eContainer).ports.select(p|p.name == name).size == 1;  
   
// interfaces must have unique names per system
context Interface ERROR "duplicate name ("+loc()+")":
	((System)eContainer).interfaces.select(i|i.name == name).size == 1;  

// components must have unique names per system
context Component ERROR "duplicate name ("+loc()+")":
	((System)eContainer).components.select(i|i.name == name).size == 1;  
 
// compositionss must have unique names per system
//context System ERROR "duplicate name ("+loc()+")":
//	((System)eContainer).compositions.select(i|i.name == name).size == 1;  

// data types must have unique names per system
context DataType ERROR "duplicate name ("+loc()+")":
	((System)eContainer).datatypes.select(i|i.name == name).size == 1;  
   
// connector's source must be a required port
context Connector ERROR "source must be a required port ("+loc()+")":
	RequiredPort.isInstance(source.port);

// a simple connector's target must be a provided port
context Connector ERROR "target must be a provided port ("+loc()+")":
	ProvidedPort.isInstance(target.port);   
   
// interactions must have unique names
context MessageInteraction ERROR "duplicate interaction name ("+loc()+")":
	interface().interactions.select(i|i.name == name).size == 1; 

// message parameter names must be unique
context MessageParameter ERROR "duplicate parameter name ("+loc()+")":
	message().parameters.select(p|p.name == name).size == 1;
	
	


context ConfigurationParameter ERROR "duplicate name ("+loc()+")":
	((ComponentConfiguration)eContainer).params.select(p|p.name == name).size == 1;
		
context ConfigurationParameterSetting if Instance.isInstance(eContainer.eContainer) ERROR "cannot define two values for the same parameter ("+loc()+")":
	((InstanceConfiguration)eContainer).settings.select(p|p.param == param).size == 1;

context TextConfigurationParameterValue ERROR "wrong type, "+((ConfigurationParameterSetting)eContainer).param.type.literalString()+" expected":
	((ConfigurationParameterSetting)eContainer).param.type == ConfigParamTypeEnum::TEXT;
		
context BooleanConfigurationParameterValue ERROR "wrong type, "+((ConfigurationParameterSetting)eContainer).param.type.literalString()+" expected":
	((ConfigurationParameterSetting)eContainer).param.type == ConfigParamTypeEnum::BOOL;
	
context NumericConfigurationParameterValue ERROR "wrong type, "+((ConfigurationParameterSetting)eContainer).param.type.literalString()+" expected":
	((ConfigurationParameterSetting)eContainer).param.type == ConfigParamTypeEnum::NUMBER;

context ConfigurationParameterSetting if Instance.isInstance(eContainer.eContainer) ERROR "parameter is not configurable at instantiation time ("+loc()+")":
	param.valueTime == ValueTimeEnum::INSTANCEDEFINITION;

context Instance ERROR "not all instantiation-time configuration parameters defined ("+loc()+")":
	type.configuration.params.select(p|p.valueTime == ValueTimeEnum::INSTANCEDEFINITION).forAll(p|configuration.settings.exists(s|s.param == p));
	

////// Feature checks ///////
//*************************//

context FeatureClause ERROR "no feature model imported":
	featureModelUri() != null;	

context Feature ERROR "feature '"+feature+"' does not exist in feature model":
	getAllFeatures(featureModelUri()).contains( feature );

context FeatureAndList ERROR "one ore more features in list not found":
  getAllFeatures(featureModelUri()).containsAll( featureList );
 
context FeatureOrList ERROR "one ore more features in list not found":
  getAllFeatures(featureModelUri()).containsAll( featureList );  

context Atom ERROR "feature '"+feature+"' does not exist in feature model":
 	feature != null ? getAllFeatures(featureModelUri()).contains( feature ) : true;	
	
	
