/*
 * generated by Xtext
 */
package org.openarchitectureware.demo.archdsl.language.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.IScopedElement;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.ScopedElement;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.openarchitectureware.demo.archdsl.language.adsl.Component;
import org.openarchitectureware.demo.archdsl.language.adsl.Composition;
import org.openarchitectureware.demo.archdsl.language.adsl.Connector;
import org.openarchitectureware.demo.archdsl.language.adsl.Instance;
import org.openarchitectureware.demo.archdsl.language.adsl.InstancePortPair;
import org.openarchitectureware.demo.archdsl.language.adsl.Port;
import org.openarchitectureware.demo.archdsl.language.adsl.ProvidedPort;
import org.openarchitectureware.demo.archdsl.language.adsl.RequiredPort;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class AdslScopeProvider extends AbstractDeclarativeScopeProviderWithUtilities {

	IScope scope_InstancePortPair_port(InstancePortPair ctx, EReference ref)
	{
		Instance i = ctx.getInstance();
		if ( i == null ) {
			return IScope.NULLSCOPE;
		} else{
			return createSimpleNameScope( i.getType().getPorts() );
		}
	}

	IScope scope_InstancePortPair_instance(InstancePortPair ctx, EReference ref)
	{
		Composition c = goUpTo(ctx, Composition.class);
		return createSimpleNameScope( c.getInstances() );
	}

	private Iterable<IScopedElement> getRPorts(Component comp) {
		List<IScopedElement> result = new ArrayList<IScopedElement>();
		for (Port f : comp.getPorts()){
			if (f instanceof RequiredPort)
				result.add(ScopedElement.create(f.getName(), f));
		}
		return result;
	} 

	private Iterable<IScopedElement> getPPorts(Component comp) {
		List<IScopedElement> result = new ArrayList<IScopedElement>();
		for (Port f : comp.getPorts()){
			if (f instanceof ProvidedPort)
				result.add(ScopedElement.create(f.getName(), f));
		}
		return result;
	} 



}
