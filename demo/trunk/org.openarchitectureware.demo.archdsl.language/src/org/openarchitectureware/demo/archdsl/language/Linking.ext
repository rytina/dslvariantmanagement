import adsl;
import pvmodel;

extension org::openarchitectureware::demo::archdsl::language::Extensions;
extension org::openarchitectureware::demo::archdsl::language::GenLinking reexport;
extension org::openarchitectureware::xtext::parser::LinkerUtils;
extension org::openarchitectureware::util::stdlib::io;

/*
 * If you need more sophisticated linking semantic just overwrite the linking extensions here and add your own logic.
 * Have a look at the generated org::openarchitectureware::demo::archdsl::language::GenLinking (typically located in src-gen)
 */ 
 
link(emf::EObject this) :
	let all = allLocalElements() :
		all.typeSelect(adsl::MakeFile).collect(e|e.link_deployment()) ->
		all.typeSelect(adsl::ComponentAPIGenerationSpec).collect(e|e.link_component()) ->
		all.typeSelect(adsl::Deployment).collect(e|e.link_topology()) ->
		all.typeSelect(adsl::Deployment).collect(e|e.link_deliverableSystem()) ->
		all.typeSelect(adsl::InstanceNodeMapping).collect(e|e.link_nodeRef()) ->
		all.typeSelect(adsl::InstanceRef).collect(e|e.link_instance()) ->
		all.typeSelect(adsl::ProvidedPort).collect(e|e.link_interface()) ->
		all.typeSelect(adsl::RequiredPort).collect(e|e.link_interface()) ->
		all.typeSelect(adsl::PrimitiveTypeRef).collect(e|e.link_type()) ->
		all.typeSelect(adsl::SimpleTypeRef).collect(e|e.link_type()) ->
		all.typeSelect(adsl::CollectionTypeRef).collect(e|e.link_type()) ->
		all.typeSelect(adsl::Instance).collect(e|e.link_type()) ->
		all.typeSelect(adsl::InstancePortPair).collect(e|e.link_instance()) ->
		all.typeSelect(adsl::InstancePortPair).collect(e|e.link_port()) ->
		all.typeSelect(adsl::ConfigurationParameterSetting).collect(e|e.link_param()) ->
        null; 
 
Void link_port(adsl::InstancePortPair this) :
	(let ents = this.allElements().typeSelect(adsl::Port) :
		this.setPort(ents.selectFirst(e|( e.id() == this.parsedString("port") ) && 
		                                ( (Component)e.eContainer) == instance.type ) ) );
 
